def pretty_print(answer):
    """
    when you want a nice printout of RangeFinder.<some_func> that returns a dictionary.

    Use this to see where your test answer differs from expected answer.
    """
    print(pretty_string(answer))


def pretty_string(answer):
    y_vals = [pt.y for pt in answer]
    x_vals = [pt.x for pt in answer]

    blank_space = ' ' * len('{!r}: {}'.format(*next(iter(answer.items()))))
    rows = []
    for row in range(min(y_vals), max(y_vals) + 1):
        row_entries = []
        for column in range(min(x_vals), max(x_vals) + 1):
            point = Point(column, row)
            if point not in answer:
                row_entries.append(blank_space)
            else:
                row_entries.append('{!r}: {}'.format(point, answer[point]))
        rows.append(', '.join(row_entries))
    return '\n'.join(rows)


class TestPrettyString(unittest.TestCase):
    def test_basic_square(self):

        test = {Point(0, 0): 6, Point(1, 0): 5,
                Point(0, 1): 4, Point(1, 1): 3,
                Point(0, 2): 2, Point(1, 2): 1}
        expected = ('Point(0, 0): 6, Point(1, 0): 5\n' +
                    'Point(0, 1): 4, Point(1, 1): 3\n' +
                    'Point(0, 2): 2, Point(1, 2): 1')
        pretty_print(test)
        self.assertEqual(pretty_string(test), expected)

    def test_basic_square_negative_values(self):

        test = {Point(-1, -1): 6, Point(0, -1): 5,
                Point(-1, 0): 6, Point(0, 0): 5,
                Point(-1, 1): 4, Point(0, 1): 3,
                Point(-1, 2): 2, Point(0, 2): 1}
        expected = ('Point(-1, -1): 6, Point(0, -1): 5\n' +
                    'Point(-1, 0): 6, Point(0, 0): 5\n' +
                    'Point(-1, 1): 4, Point(0, 1): 3\n' +
                    'Point(-1, 2): 2, Point(0, 2): 1')
        pretty_print(test)
        self.assertEqual(pretty_string(test), expected)

    def test_missing_corners_right(self):
        test = {Point(0, 0): 6,
                                Point(1, 1): 3,
                Point(0, 2): 2}
        expected = ('Point(0, 0): 6,               \n' +
                    '              , Point(1, 1): 3\n' +
                    'Point(0, 2): 2,               ')
        pretty_print(test)
        self.assertEqual(pretty_string(test), expected)

    def test_missing_corners_left(self):
        test = {                Point(1, 0): 5,
                Point(0, 1): 4,
                                Point(1, 2): 1}
        expected = ('              , Point(1, 0): 5\n' +
                    'Point(0, 1): 4,               \n' +
                    '              , Point(1, 2): 1')
        pretty_print(test)
        self.assertEqual(pretty_string(test), expected)

    def test_missing_row(self):
        test = {Point(0, 0): 6, Point(1, 0): 5,

                Point(0, 2): 2, Point(1, 2): 1}
        expected = ('Point(0, 0): 6, Point(1, 0): 5\n' +
                    '              ,               \n' +
                    'Point(0, 2): 2, Point(1, 2): 1')
        pretty_print(test)
        self.assertEqual(pretty_string(test), expected)

    def test_missing_column(self):

        test = {Point(0, 0): 6,                 Point(2, 0): 10,
                Point(0, 1): 4,                 Point(2, 1): 20,
                Point(0, 2): 2,                 Point(2, 2): 30}
        expected = ('Point(0, 0): 6,               , Point(2, 0): 10\n' +
                    'Point(0, 1): 4,               , Point(2, 1): 20\n' +
                    'Point(0, 2): 2,               , Point(2, 2): 30')
        pretty_print(test)
        self.assertEqual(pretty_string(test), expected)
